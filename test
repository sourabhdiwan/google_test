[LS] env config.ini
url = https://lookerstudio.google.com
browser = chrome

[Database]
host = localhost
port = 5432
database = test_db
user = test_user
password = test_password

basepage.py

from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By

class BasePage:
    def __init__(self, driver):
        self.driver = driver

    def wait_for_element(self, locator, timeout=10):
        return WebDriverWait(self.driver, timeout).until(
            EC.presence_of_element_located((By.XPATH, locator))
        )

    def click(self, locator):
        self.wait_for_element(locator).click()

    def enter_text(self, locator, text):
        self.wait_for_element(locator).send_keys(text)

    def get_text(self, locator):
        return self.wait_for_element(locator).text

report_page.py

from .base_page import BasePage
from utils.locator_generator import generate_locator

class ReportPage(BasePage):
    def enter_field_value(self, field_name, value):
        locator = generate_locator(field_name, element_type="input")
        self.enter_text(locator, value)

    def click_button(self, button_name):
        locator = generate_locator(button_name, element_type="button")
        self.click(locator)

    def get_table_data(self, table_name):
        locator = generate_locator(table_name, element_type="table")
        table = self.wait_for_element(locator)
        return table.text

utils/excel_reader.py

import pandas as pd

def read_test_scenarios(file_path, sheet_name="Test Scenarios"):
    """
    Reads the test scenarios from the Excel file.
    """
    df = pd.read_excel(file_path, sheet_name=sheet_name)
    return df.to_dict("records")

utils/locator_generator.py

def generate_locator(field_name, element_type="input"):
    """
    Generates a dynamic XPath based on the field name and element type.
    """
    if element_type == "input":
        return f"//input[@id='{field_name}']"
    elif element_type == "button":
        return f"//button[text()='{field_name}']"
    elif element_type == "table":
        return f"//table[@id='{field_name}']"
    else:
        raise ValueError(f"Unsupported element type: {element_type}")

utils/data_comparator.py

import pandas as pd

def compare_data(ui_data, db_data):
    """
    Compares UI data with database data.
    """
    ui_df = pd.DataFrame(ui_data)
    db_df = pd.DataFrame(db_data)
    return ui_df.equals(db_df)

utils/report_utils.py

import allure
from selenium import webdriver

def take_screenshot(driver, name):
    """
    Takes a screenshot and attaches it to the Allure report.
    """
    screenshot_path = f"screenshots/{name}.png"
    driver.save_screenshot(screenshot_path)
    allure.attach.file(screenshot_path, name=name, attachment_type=allure.attachment_type.PNG)

tests/conftest.py

import pytest
from selenium import webdriver
from configparser import ConfigParser

@pytest.fixture(scope="session")
def browser():
    config = ConfigParser()
    config.read("config/environment_config.ini")
    browser_name = config.get("LS", "browser")

    if browser_name == "chrome":
        driver = webdriver.Chrome()
    elif browser_name == "firefox":
        driver = webdriver.Firefox()
    else:
        raise ValueError(f"Unsupported browser: {browser_name}")

    yield driver
    driver.quit()

tests/test_functional/test_report_validation.py

import allure
import pytest
from pages.report_page import ReportPage
from utils.excel_reader import read_test_scenarios
from utils.db_connector import execute_query
from utils.data_comparator import compare_data
from utils.report_utils import take_screenshot

@allure.feature("Report Validation")
class TestReportValidation:
    @allure.story("Validate Report Data")
    @allure.title("Test Report Data Validation")
    def test_report_validation(self, browser):
        # Read test scenarios from Excel
        test_scenarios = read_test_scenarios("config/test_config.xlsx")

        # Initialize ReportPage
        report_page = ReportPage(browser)
        report_page.driver.get("https://lookerstudio.google.com")

        for scenario in test_scenarios:
            field_name = scenario["Field Name"]
            field_value = scenario["Field Value"]
            db_column = scenario["DB Column Mapping"]

            # Enter field values
            if field_value:
                report_page.enter_field_value(field_name, field_value)

            # Click buttons
            if field_name == "search_button":
                report_page.click_button(field_name)

            # Validate table data
            if field_name == "result_table":
                ui_data = report_page.get_table_data(field_name)
                query = f"SELECT {db_column} FROM reports WHERE condition;"
                db_data = execute_query(query)
                assert compare_data(ui_data, db_data), "Data mismatch"

        # Take screenshot for Allure report
        take_screenshot(browser, "test_report_validation")


requirements.txt

allure-pytest
allure-python-commons
pytest
selenium
pandas
openpyxl
psycopg2
configparser

pytest.ini

[pytest]
addopts = --alluredir=allure-results/


